#
# This rulebook an example where a Announce is received from a ServiceHub
# in response to an Offer that was sent in some previous step. This
# Announce can be processed immediately in rule [1].
#
# This rulebook also contains an example what to do when a Announce is received
# without a previous Offer. In some way we need to have the maintainer decide
# what to do with this Announce. The maintainer sends an Accept or a Reject.
# In case of an Accept rule[3] is started where we ask to reprocess the
# first Announce (the Orchestrator "knows" it is accepted by the maintainer)
#
# See:
#   https://mellonscholarlycommunication.github.io/coar-usecases/mellon-scenario.html#service-hub-announces-a-new-resource-about-an-artefact-in-the-data-pod
rulebook "Service Hub Announces a new resource about an artefact in the Data Pod"

myself:        <https://pod.institution.org/reseacher/alice>
registration:  <https://repository.institution.org/inbox>
as:            <https://www.w3.org/ns/activitystreams#>
coar-notify:   <http://purl.org//coar/notify_vocabulary/>
sorg:          <https://schema.org/>
rdf:           <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
pol:           <https://www.example.org/ns/policy#>
fno:           <https://w3id.org/function/ontology#>

rule "[1] Service Hub Announce is a response to a previous Offer"

when

  # An AS2 Announce was received...
  ?this a as:Announce .

  # ...in reply to a previous processed offer
  (?this as:inReplyTo ?notification) -> isKnownNotification(?notification, as:Offer) .
      OR
  # ...is known to be accepted by the maintainer
  (?this ?_ ?_) -> isKnownNotification(?this , as:Accept) .

then

  # Append to the Artefact EventLog
  ?s pol:policy [
      a fno:Execution ;
      fno:executes pol:appendToLog ;
  ] .

  # Create a backlink
  ?this pol:policy [
      a fno:Execution ;
      fno:executes pol:addLink
  ] .

rule "[2] Service Hub Announce is standalone (no previous Offer)"

when

  # An AS2 Announce was received...
  ?this a as:Announce .

  # ...not in reply to a previous offer
  (?this) -> NOT EXISTS( ?this as:inReplyTo ?offer) .

then

  # Do nothing, wait for the maintainer to send an Accept

rule "[3] Maintainer sends an Accept to a previous stored announce"

when

  # An AS2 Accept was received...
  ?this a as:Accept .

  # ...from myself
  ?this as:actor myself: .

  # ...in reply to a previous announce
  (?this as:inReplyTo ?notification) -> isKnownNotification(?notification)

then

  # Send the accepted notification back to step [1]
  ?this pol:policy [
      a fno:Execution ;
      fno:executes pol:reprocessNotification
      pol:notification ?notification
  ] .

rule "[4] Maintainer sends an Reject to a previous stored announce"

when

  # An AS2 Accept was received...
  ?this a as:Reject .

  # ...from myself
  ?this as:actor myself: .

  # ...in reply to a previous announce
  (?this as:inReplyTo ?notification) -> isKnownNotification(?notification)

then

  # Do nothing ...
