<pre class='metadata'>
Title: Rule language for decentralized business processes
Shortname: rulelanguage
Level: 1
Status: DREAM
URL: https://mellonscholarlycommunication.github.io/spec-rulelanguage
Editor: Patrick Hochstenbach, Ghent University, patrick.hochstenbach@ugent.be
Editor: Miel Vander Sande, meemoo - [Flemish Institute for Archiving](https://meemoo.be), miel.vandersande@meemoo.be
Editor: Ruben Dedecker, Ghent University, ruben.dedecker@ugent.be
Editor: Jeroen Werbrouck, Ghent University, Jeroen.Werbrouck@ugent.be
Abstract: This document specifies the definition and application of a rule language to capture machine-readable business processes.
Markup Shorthands: markdown yes
</pre>

<style>
table {
  margin: 25px auto;
  border-collapse: collapse;
  border: 1px solid #eee;
  border-bottom: 2px solid #005A9C;
}
table tr:hover {
  background: #f4f4f4;
}
table tr:hover td {
  color: #555;
}
table th, table td {
  color: #999;
  border: 1px solid #eee;
  padding: 12px 12px;
  border-collapse: collapse;
}
table th {
  background: #005A9C;
  color: #fff;
}
table th.last {
  border-right: none;
}
</style>

Set of documents {#set}
=======================

This document is one of the specifications produced by the **ResearcherPod** and **ErfgoedPod** project:

1. [Overview](/spec-overview/)
2. [Orchestrator](/spec-orchestrator/)
3. [Data Pod](/spec-datapod/)
4. [Rule language](/spec-rulelanguage/) (this document)
5. [Artefact Lifecycle Event Log](/spec-eventlog/)
6. [Notifications](/spec-notifications/)

Introduction {#intro}
=====================

Introduction here.

Policy language
=====================

A Policy is set of machine-readable business rules that instruct the Orchestrator
what [Actions](/spec-overview/#Action) to take in response to a [Trigger](/spec-overview/#Trigger)
such as incoming LDN notifications.

To demonstrate the capabilities of the policies and possible use-cases it should cover, we introduce a
pseudo rule language which acts as a guide to find reference implementations. Our pseudolanguage
combines features of Drools and SPARQL. Examples are given how some of the features
of this language can be implemented in a concrete implementation.

Each rule in a policy document has the structure of **rule**, **when**, **then** clauses:

<div class="example">
**rule** *Name*

[*Prefix*]*

**when**

    [*Condition*] *

**then**

    [*Action*] *
</div>

An example of a simple rule:

<div class="example">

<pre>

<b>rule</b> "Add to the EventLog"

as:   &lt;https://www.w3.org/ns/activitystreams#&gt;
rdf:  &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;
pol:  &lt;https://www.example.org/ns/policy#&gt;

<b>when</b>

  ?s a as:Announce . <i>OR</i>
    ?s a as:Create .

<b>then</b>

  ?s pol:policy [  a pol:AppendToLog  ] .
  ?s pol:policy [  a pol:RemoveBlindCopies   ].
</pre>

</div>

Given an LDN Notification:

<div class="example">
```
{
  "@context": "https://www.w3.org/ns/activitystreams",
  "id": "" ,
  "type": "Create" ,
  "object": "http://miel.data.pod/publications/mellon.pdf",
  "target": "http://ruben.data.pod/inbox",
  "bcc": [
   "http://patrick.data.pod/inbox",
   "http://jeroen.data.pod/inbox"
   ]
}
```
</div>

the rules will result in an output:

<div class="example">
```
@prefix as:   <https://www.w3.org/ns/activitystreams#> .
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix pol:  <https://www.example.org/ns/policy#> .

<http://this.document> pol:policy [  a pol:AppendToLog  ] .
<http://this.document> pol:policy [  a pol:RemoveBlindCopies   ].
```
</div>

These resulrs could start up an [Orchestrator](/spec-overview/#Orchestrator) process that adds the Create event
to the [EventLog](/spec-overview/#EventLog) and removes the `bcc` blind copies.

## Conditions

Conditions in the **when** clause are interpreted as boolean statements. When the
condition is in the format of a triple, it means the *existence* of the triple in the
input data. This behavior matches SPARQL *WHERE* clause statements:

<div class="example">
<pre>
<b>when</b>
    ?s foaf:name "Herbert"  .      # a property `foad:name` equals "Herbert" shoud exist
    ?s ?p  42  .                   # a property with value 42 should exist
    ?s/as:object/nrr:reviews ?o  . # a nested as:object/nrr:reviews should exist
</pre>
</div>

Functions in our pseudolanguage mimic the SPARQL *FILTER* statements:

<div class="example">
<pre>
   (?s ?p ?o) -> <i>SomeFunction with (?s,?p,?o)</i>
</pre>
</div>

Some examples:

<div class="example">
<pre>
<b>when</b>
    # a resource has a class that is an as:Announce or as:Accept
    (?s a ?class) -> ?class IN (as:Announce , as:Accept) .

    # a propety needs to have a case-insensitive name "yahoo"
    (?s ?p ?o) -> regex(?o, "yahoo",i) .

    # the as:object needs to have an IRI value
    (?s as:object ?o) -> isIRI(?o) .

    # the as:objects needs to have an IRI value or is a blankNode
    (?s as:object ?o) -> isIRI(?o) OR isBlank(?o) .

    # the isLocalEventResouce should return a true value for the as:object value
    (?s as:object ?o) -> isLocalEventResouce(?o)

    # the predicate and object should return a true value from myLocalFunction
    (?s ?p ?o) -> myLocalFunction(?p, ?o) .

    # combine with booleans
    (?s as:object ?o) -> isIRI(?o) OR isBlank(?o) .
        OR ?s my:justATest true .

</pre>
</div>

## Actions

Actions are a list of zero or more statements that mimic the triples that are generated
by the SPARQL *CONSTRUCT* statement:

<div class="example">
<pre>
<b>then</b>

    ?this pol:policy [
      a pol:SendMessage ;
      as:to "http://my.institute.org/inbox" ;
      as:from :Me ;
      as:message "Hello world" .
    ] .

    ?this pol:policy [ a pol:AppendToLog ] .

    (?this ?_ ?_) -> SomeFunctionThatGeneratesTriplesFor(?this) .
</pre>
</div>

## Result

The result of a rule execution it the generation of zero or more triples. These generated triples
create a graph independent from the input graph of the rule engine. Rules can't influence each other.
This mimics the style of rule processing in SHACL.

An example:

<div class="example">
<pre>
<b>rule</b> "First rule"

<b>when</b>
   ?s ?p ?o .

<b>then</b>
   ?s my:match "first rule" .

#---<br>
<b>rule</b> "Second rule"

<b>when</b>
  ?s ?p ?o .

<b>then</b>
  ?s my:match "second rule" .

#---<br>
<b>rule</b> "Third rule"

<b>when</b>
  ?s ?p ?o .

<b>then</b>
  ?s my:match "third rule" .
</pre>
</div>

When these three rules are excuted against any input graph, it will result in two
graphs: the input graph and the result graph which contains:

<div class="example">
<pre>
  my:input_id my:match "third rule" .
  my:input_id my:match "first rule" .
  my:input_id my:match "second rule" .
</pre>
</div>

Note: the order in which the rules are executed is not specified.

Examples
=====================

## Receving Linked Data Notifications

We demonstrate here how a policy can be created that acts on incoming Linked Data Notifications.

This policy rule will request to add an *AS2 Offer* to the **EventLog**:

<div class="example">
<pre>
<b>rule</b> "Add offer to the EventLog"

as:   &lt;https://www.w3.org/ns/activitystreams#&gt;
rdf:  &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;
pol:  &lt;https://www.example.org/ns/policy#&gt;

<b>when</b>

  ?s a as:Offer .

<b>then</b>
  ?s pol:policy [ a pol:AppendToLog ] .
</pre>
</div>

Given the following JSON-LD input:

<div class="example">
```(JSON)
{
  "@context": [
    "https://www.w3.org/ns/activitystreams",
    "http://purl.org/coar/notify"
  ],
  "actor": {
    "id": "https://orcid.org/0000-0002-1825-0097",
    "ldp:inbox": "https://josiahcarberry.com/ldn/inbox",
    "name": "Josiah Carberry",
    "type": [
      "Person"
    ]
  },
  "id": "urn:uuid:0370c0fb-bb78-4a9b-87f5-bed307a509dd",
  "object": {
    "id": "https://origin-system.org/resources/0021",
    "ietf:cite-as": "https://doi.org/10.4598/12123487",
    "type": [
      "Document"
    ]
  },
  "origin": {
    "id": "https://origin-system.org",
    "ldp:inbox": "https://origin-system.org/inbox/",
    "type": [
      "Service"
    ]
  },
  "target": {
    "id": "https://target-system.org",
    "ldp:inbox": "https://target-system.org/inbox/",
    "type": [
      "Service"
    ]
  },
  "type": [
    "Offer"
  ]
}
```
</div>

The policy rules above will result in a new graph with these triples:

<div class="example">
```
@prefix as:   <https://www.w3.org/ns/activitystreams#> .
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix pol:  <https://www.example.org/ns/policy#> .

<urn:uuid:0370c0fb-bb78-4a9b-87f5-bed307a509dd> pol:policy [ a pol:AppendToLog ] .
```
</div>

A policy language interpeter, such as the Orchestrator, could use the
new generated graph to write a copy of the notification in some way to the
Artefact Lifecycle Event Log. The `pol:AppendToLog` is interpreted in this way
as some agreed procedure call that needs to be executed on the JSON-LD input.

## Other Triggers

AS2 Notifications can not only be generated by external actors but
also internal local processes. For instance, at periodic intervals the
Orchestrator can monitor an (external) resource. When the state of a resource
changes, then it can trigger the creation of a AS2 notification. The policy
language rules can act on these notifications and decide what to do with
this information.

How these internal trigger notifications get generated is outside the scope
of this specification. We assume that the activation of a trigger results in
the generation of an AS2 notification.

### Observing resource state changes

This trigger is generated when a monitored (external) resource has a state change.

In the example below a new resource `http://my.instutution.org/people/124/publications/a03218h`
was created by `http://my.instutution.org/people/124`. The Orchestrator is triggered
&mdash; by itself or an external trusted source &mdash; of this fact using the AS2 notification:

<div class="example">
```
{
  "@context": [
      "https://www.w3.org/ns/activitystreams",
      "https://www.example.org/ns/policy"
  ] ,
  "type": [ "Create" , "pol:StateTrigger" ] ,
  "actor": "http://my.instutution.org/people/124" ,
  "object": "http://my.instutution.org/people/124/publications/a03218h" ,
  "summary": "A new publication was created by person 1234"
}
```
</div>

A policy rule to send emails when these types of StateTrigger occur can be defined as follows:

<div class="example">
<pre>

<b>rule</b> "Add State Trigger definitions"

as:   &lt;https://www.w3.org/ns/activitystreams#&gt;
rdf:  &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;
pol:  &lt;https://www.example.org/ns/policy#&gt;
email: &lt;https://local.org/ns/email#&gt;

<b>when</b>

  ?s a pol:StateTrigger . AND
    ?s a as:Create .

<b>then</b>
  ?s pol:policy [
    a email:SendEmail ;
    email:from "my@myself.and.i" ;
    email:to "you@yourself.edu" ;
    email:subject "A new resource was created!"
  ] .

</pre>
</div>

The execution of the policy rules will result in a new graph with these triples:

<div class="example">
```
@prefix as:   <https://www.w3.org/ns/activitystreams#> .
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix pol:  <https://www.example.org/ns/policy#> .
@prefix email: <https://local.org/ns/email#> .

_:b0 pol:policy [
  a email:SendEmail ;
  email:from "my@myself.and.i" ;
  email:to "you@yourself.edu" ;
  email:subject "A new resource was created!"
] .
```
</div>

Some `SendEmail` process could use this input with the AS2 notification above to
send an email to `you@yourself.edu` about the new resource.

<div class="note">
We assume there are some reasonable security measures in place, such as digital
signatures, to limit the applications that are allowed to send these type of
trigger events to the policy rule engine.
</div>

### Scheduled trigger

A scheduled trigger is defined as a recurrent activity at a scheduled interval.
In the example below we assume that cron based process is capable to generate
an AS2 notification at a specific time. We assume that every Friday at 17:00
CEST the `Weekend` trigger is activated.

<div class="example">
```(JSON)
{
  "@context": [
      "https://www.w3.org/ns/activitystreams",
      "https://www.example.org/ns/policy"
  ] ,
  "summary": "Time Trigger",
  "name": "Weekend"
  "type": [ "Announce" , "pol:DateTimeTrigger" ],
  "startTime": "2021-07-09T17:00:00-01:00" ,
}
```
</div>

A policy rule could be that on weekends a notification is send out to your
friends:

<div class="example">
<pre>

<b>rule</b> "Add State Trigger definitions"

as:   &lt;https://www.w3.org/ns/activitystreams#&gt;
rdf:  &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;
pol:  &lt;https://www.example.org/ns/policy#&gt;

<b>when</b>

  ?s a pol:DateTimeTrigger . AND ?s a as:Announce .
  ?s as:name "Weekend" .

<b>then</b>
  ?s pol:policy [
    a pol:SendAS2Notificaton ;
    a as:Activity ;
    as:actor [
      a as:Person ;
      as:name "Sally";
    ] ;
    as:object [
      a as:Note ;
      as:name "Let's go to the pub"
    ] ;
    as:to &lt;http://pod.me/my#friends&gt;
  ] .

</pre>
</div>
